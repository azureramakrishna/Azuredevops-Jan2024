IAC: Infrastructure as a code (ARMTemplates)
--------------------------------------------
Advantages:
1. Automated way of deploying resources
2. preductable
3. Repeatable

ARMTemplates & Bicep - Azure native solutions

JSON:
----
Vscode: install the extension " Azure Resource Manager Tools "

Elements or structure of the ARMtemplates

link: https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax

Schema
Contentversion
parameters
variables
resources
outputs


Helper functions:
----------------
toLower
toUpper
concat
copyindex()
resourcegroup().location
dependson[]
resourceid

Terraform:
---------
    IAC tool and its opensource


ARMTemplates                                            Terraform
------------                                            ---------
1. IAC Tool                                             1. IAC Tool
2. Azure specific                                       2. Opensource (Azure, AWS, GCP, OCI, Alibabacloud etc.)
3. JSON format                                          3. HCL (Hashicorp configuration language) format
4. Extension - .json                                    4. Extension - .tf
5. template.json                                        5. main.tf
    parameters.json                                         variables.tf
6. schema                                               6. Terraform building blocks
    contentverion                                           provider
    parameters                                              resources
    variables                                               outputs
    resources
    outputs
7. Powershell/CLI commands                              7. Terraform lifecycle
    New-AzResourceGroupDeployment `                         terraform init
      -ResourceGroupName                                    terraform fmt
      -TemplateFile                                         terraform validate
      -TemplateParametersFile                               terraform plan
      -Verbose                                              terraform apply
                                                            terraform destroy


Gettting started with terraform:
-------------------------------
Downalod terraform - https://developer.hashicorp.com/terraform/install
Move the terraform.exe file to c:/windows folder
to validate the installation - open any terminal (powershell/cmd) - type terraform 

Extensions to install in vscode - Hashicorp terraform & Azure terraform 

Providers:
    AWS - aws
    Azure - azurerm
    GCP - google


Terraform scenarios:
-------------------
state file lock --> -lock=false
VM --> data disk manually --> terraform plan --> no changes
VM --> delete the state file --> terraform apply --> Errors
VM --> delete the VM maually --> terraform apply --> re-create the VM
main.tf --> storate, vm, nsg --> delete only storage --> -target 

to deploy multiple resources:
----------------------------
ARMTemplates - Copyindex()
Terraform - count.index
For_each

Terraform provisioners:
----------------------

Terraform provisioners have nothing in common with providers, they allow the execution of various commands or scripts on either local or remote machines, and they can also transfer files from a local environment to a remote one

There are three types of provisioners in Terraform: 

Local-exec provisioners
Remote-exec provisioners
File provisioners


AzureDevops:
-----------
Azure portal: portal.azure.com
AzureDevops:  dev.azure.com

Signup for AzureDevops:
https://learn.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops&tabs=microsoft-account

AzureDevops Documentation:
https://learn.microsoft.com/en-us/azure/devops/?view=azure-devops


How do you get work at projects:
-------------------------------
Agile Process

Sprint1  - 2 weeks (22nd Jan to 2nd Feb)
Sprint2  - 2 weeks (5th feb to 16th feb)

Sprint planning 
    Backlogs (what is the work that you want to deliver)
    Capacity planning

Daily standup calls (10 to 15min)
    Update the progress of the backlogs

Retrospective:
    what went well
    what didn't went well
    what can be improved

Agile process work flow:
-----------------------
Epic
    \_
        Features
            \_
                Userstory
                    \_
                        Task
                            \_
                                Bug


Epic            Ecomerce website like Amazon.in 
Features        Signup page 
                Login page 
                Home page 
                Category pages 
                Product catalog
                Payment gateway
                Tracking system 
                Support page

Userstory       Singup with google account 
                Singup with facebook account
                Signup with apple account 
                Singup with email and password

                Login with google account 
                Login with facebook account 

Task            Singup with google account 
                Singup with facebook account
                Signup with apple account 
                Singup with email and password

Bug             Create the bugs in case of any issues


Azure Repos:
-----------
Git download: https://git-scm.com/downloads
to validate the git installation -> open any terminal (cmd) --> type git

Git basic commands:
------------------
https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html

To initiate a repo:
------------------
git config --global user.name "saanvikitjan2024"
git config --global user.email "saanvikitjan2024@gmail.com"

git clone <cloning url>

add the files into local repo 

git status
git add .
git commit -m "ARMTemplates"
git push origin main

Azure Pipelines:
---------------
Two types of pipelines:

- Classsic editor pipeline (GUI)
- YAML pipeline (Pipeline as a code)

Pre-requisites:
--------------
1. Service connection (using service principle)
    AzureDevops (SAAS) --->   Azure subscription 
                              AWS Cloud 
                              Onprem server 

    Clinet_id: 0e76c032-2c23-4896-9193-dad790454e66
    Secret: stT8Q~lkZ********************************
    Tenant_id: 459865f1-a8aa-450a-baec-8b47a9e5c904
    Subscription_id: 2e28c82c-17d7-4303-b27a-4141b3d4088f

2. Agent pool (VM)

    - Microsoft hosted agent
        Raise a request: https://forms.office.com/pages/responsepage.aspx?id=v4j5cvGGr0GRqy180BHbR63mUWPlq7NEsFZhkyH8jChUMlM3QzdDMFZOMkVBWU5BWFM3SDI2QlRBSC4u

        disadvantage: if you wanted to get the logs we need to raise a request to microsoft 
        Queue state: if the demand is more the jobs will be in queue state only 

    - Self hosted agent
        Azure VM -> VSTS (visual studio team services agent)

        PAT: v3hiviws7ney**********************

How to set up the pipeline for ARMTemplates and Terraform:
---------------------------------------------------------